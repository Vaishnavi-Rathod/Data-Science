# Task 2: Customer Segmentation
# We'll use the Mall Customers dataset for this task

# Importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load the dataset
# Sample dataset: Mall Customers (manually created)
data = pd.DataFrame({
    "CustomerID": range(1, 11),
    "Age": [19, 21, 20, 23, 31, 22, 35, 23, 64, 30],
    "Annual Income (k$)": [15, 15, 16, 16, 17, 17, 18, 18, 19, 19],
    "Spending Score (1-100)": [39, 81, 6, 77, 40, 76, 6, 94, 3, 72]
})

# Select features for clustering
X = data[["Annual Income (k$)", "Spending Score (1-100)"]]

# Standardizing the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Using the Elbow Method to find the optimal number of clusters
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plot the Elbow Method
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

# Applying K-Means with the optimal number of clusters (let's assume 3)
kmeans = KMeans(n_clusters=3, init='k-means++', random_state=42)
labels = kmeans.fit_predict(X_scaled)

# Add cluster labels to the dataset
data['Cluster'] = labels

# Visualizing the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(
    x=data['Annual Income (k$)'],
    y=data['Spending Score (1-100)'],
    hue=data['Cluster'],
    palette='viridis',
    s=100
)
plt.title('Customer Segments')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend(title='Cluster')
plt.show()

# Displaying the resulting data
print("Segmented Data:")
print(data)
